getwd()
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This function returns the inverse of a matrix built with makeCacheMatrix().
## It first looks to see if the inverse has already been computed. If not, it
## computes the inverse and stores the value in a cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
amatrix<-makeCacheMatrix(matrix(c(1,2,3,4),nrow=2,ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$get()
amatrix$getinverser()
amatrix$getinverse()
cacheSolve(amatrix)
q()
